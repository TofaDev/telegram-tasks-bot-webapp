"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioAttachment = void 0;
const inspectable_1 = require("inspectable");
const structures_1 = require("../structures");
const file_attachment_1 = require("./file-attachment");
/**
 * This object represents an audio file to be treated as music by the Telegram
 * clients.
 */
// TODO: extended: ['fileId', 'fileUniqueId']
let AudioAttachment = class AudioAttachment extends file_attachment_1.FileAttachment {
    constructor() {
        super(...arguments);
        this.attachmentType = 'audio';
    }
    /** Duration of the audio in seconds as defined by sender */
    get duration() {
        return this.payload.duration;
    }
    /** Performer of the audio as defined by sender or by audio tags */
    get performer() {
        return this.payload.performer;
    }
    /** Title of the audio as defined by sender or by audio tags */
    get title() {
        return this.payload.title;
    }
    /** Original filename as defined by sender */
    get fileName() {
        return this.payload.file_name;
    }
    /** MIME type of the file as defined by sender */
    get mimeType() {
        return this.payload.mime_type;
    }
    /** File size */
    get fileSize() {
        return this.payload.file_size;
    }
    /** Thumbnail of the album cover to which the music file belongs */
    get thumbnail() {
        const { thumbnail } = this.payload;
        if (!thumbnail) {
            return;
        }
        return new structures_1.PhotoSize(thumbnail);
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], AudioAttachment.prototype, "duration", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], AudioAttachment.prototype, "performer", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], AudioAttachment.prototype, "title", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], AudioAttachment.prototype, "fileName", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], AudioAttachment.prototype, "mimeType", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], AudioAttachment.prototype, "fileSize", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], AudioAttachment.prototype, "thumbnail", null);
AudioAttachment = __decorate([
    (0, inspectable_1.Inspectable)()
], AudioAttachment);
exports.AudioAttachment = AudioAttachment;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhotoAttachment = void 0;
const inspectable_1 = require("inspectable");
const attachment_1 = require("./attachment");
/** This object represents a photo file with it's sizes */
let PhotoAttachment = class PhotoAttachment extends attachment_1.Attachment {
    constructor(payload) {
        super();
        this.attachmentType = 'photo';
        this.payload = payload;
        this.sorted = [...this.payload].sort((first, second) => (second.width * second.height) - (first.width * first.height));
    }
    /** Photo sizes */
    get sizes() {
        return this.payload;
    }
    /** Biggest size of the photo */
    get bigSize() {
        return this.sorted[0];
    }
    /** Medium size of the photo */
    get mediumSize() {
        return this.sorted[Math.floor(this.sorted.length / 2)];
    }
    /** Smallest size of the photo */
    get smallSize() {
        return this.sorted[this.sorted.length - 1];
    }
    toJSON() {
        return [
            this.smallSize.toJSON(),
            this.mediumSize.toJSON(),
            this.bigSize.toJSON()
        ];
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], PhotoAttachment.prototype, "bigSize", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PhotoAttachment.prototype, "mediumSize", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PhotoAttachment.prototype, "smallSize", null);
PhotoAttachment = __decorate([
    (0, inspectable_1.Inspectable)()
], PhotoAttachment);
exports.PhotoAttachment = PhotoAttachment;

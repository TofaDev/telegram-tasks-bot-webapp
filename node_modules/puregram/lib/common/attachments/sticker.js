"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StickerAttachment = void 0;
const inspectable_1 = require("inspectable");
const structures_1 = require("../structures");
const file_attachment_1 = require("./file-attachment");
/** This object represents a sticker. */
// TODO: extended: ['fileId', 'fileUniqueId']
let StickerAttachment = class StickerAttachment extends file_attachment_1.FileAttachment {
    constructor() {
        super(...arguments);
        this.attachmentType = 'sticker';
    }
    /**
     * Type of the sticker, currently one of `regular`, `mask`, `custom_emoji`.
     *
     * The type of the sticker is independent from its format, which is determined by the fields `is_animated` and `is_video`.
     */
    get type() {
        return this.payload.type;
    }
    /** Sticker width */
    get width() {
        return this.payload.width;
    }
    /** Sticker height */
    get height() {
        return this.payload.height;
    }
    /** `true`, if the sticker is animated */
    isAnimated() {
        return this.payload.is_animated;
    }
    /** `true`, if the sticker is a video sticker */
    isVideo() {
        return this.payload.is_video;
    }
    /** Sticker thumbnail in the .WEBP or .JPG format */
    get thumbnail() {
        const { thumbnail } = this.payload;
        if (!thumbnail) {
            return;
        }
        return new structures_1.PhotoSize(thumbnail);
    }
    /** Emoji associated with the sticker */
    get emoji() {
        return this.payload.emoji;
    }
    /** Name of the sticker set to which the sticker belongs */
    get setName() {
        return this.payload.set_name;
    }
    /** Is this sticker a premium one? */
    isPremium() {
        return this.premiumAnimation !== undefined;
    }
    /** Premium animation for the sticker, if the sticker is premium */
    get premiumAnimation() {
        const { premium_animation } = this.payload;
        if (!premium_animation) {
            return;
        }
        return new structures_1.File(premium_animation);
    }
    /** For mask stickers, the position where the mask should be placed */
    get maskPosition() {
        const { mask_position } = this.payload;
        if (!mask_position) {
            return;
        }
        return new structures_1.MaskPosition(mask_position);
    }
    /** For custom emoji stickers, unique identifier of the custom emoji */
    get customEmojiId() {
        return this.payload.custom_emoji_id;
    }
    /** `true`, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places */
    get needs_repainting() {
        return this.payload.needs_repainting;
    }
    /** File size */
    get fileSize() {
        return this.payload.file_size;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], StickerAttachment.prototype, "type", null);
__decorate([
    (0, inspectable_1.Inspect)()
], StickerAttachment.prototype, "width", null);
__decorate([
    (0, inspectable_1.Inspect)()
], StickerAttachment.prototype, "height", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true })
], StickerAttachment.prototype, "isAnimated", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true })
], StickerAttachment.prototype, "isVideo", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "thumbnail", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "emoji", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "setName", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "premiumAnimation", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "maskPosition", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "customEmojiId", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "needs_repainting", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], StickerAttachment.prototype, "fileSize", null);
StickerAttachment = __decorate([
    (0, inspectable_1.Inspectable)()
], StickerAttachment);
exports.StickerAttachment = StickerAttachment;

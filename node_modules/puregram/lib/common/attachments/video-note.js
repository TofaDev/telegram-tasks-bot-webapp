"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoNoteAttachment = void 0;
const inspectable_1 = require("inspectable");
const structures_1 = require("../structures");
const file_attachment_1 = require("./file-attachment");
/** This object represents a video message. */
// TODO: extended: ['fileId', 'fileUniqueId']
let VideoNoteAttachment = class VideoNoteAttachment extends file_attachment_1.FileAttachment {
    constructor() {
        super(...arguments);
        this.attachmentType = 'video_note';
    }
    /**
     * Video width and height (diameter of the video message) as defined by
     * sender
     */
    get length() {
        return this.payload.length;
    }
    /** Duration of the video in seconds as defined by sender */
    get duration() {
        return this.payload.duration;
    }
    /** Video thumbnail */
    get thumbnail() {
        const { thumbnail } = this.payload;
        if (!thumbnail) {
            return;
        }
        return new structures_1.PhotoSize(thumbnail);
    }
    /** File size */
    get fileSize() {
        return this.payload.file_size;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], VideoNoteAttachment.prototype, "length", null);
__decorate([
    (0, inspectable_1.Inspect)()
], VideoNoteAttachment.prototype, "duration", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], VideoNoteAttachment.prototype, "thumbnail", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], VideoNoteAttachment.prototype, "fileSize", null);
VideoNoteAttachment = __decorate([
    (0, inspectable_1.Inspectable)()
], VideoNoteAttachment);
exports.VideoNoteAttachment = VideoNoteAttachment;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForceReply = void 0;
const inspectable_1 = require("inspectable");
/** Force reply keyboard */
let ForceReply = class ForceReply {
    constructor() {
        this.isSelective = false;
    }
    /** Use this parameter if you want to show the keyboard to specific users only */
    selective(selective = true) {
        this.isSelective = selective;
        return this;
    }
    /** The placeholder to be shown in the input field when the keyboard is active */
    setPlaceholder(placeholder) {
        this.placeholder = placeholder;
        return this;
    }
    /** Returns JSON which is compatible with Telegram's `ForceReply` interface */
    toJSON() {
        return {
            force_reply: true,
            input_field_placeholder: this.placeholder,
            selective: this.isSelective
        };
    }
    toString() {
        return JSON.stringify(this);
    }
};
__decorate([
    (0, inspectable_1.Inspect)({ as: 'selective', nullable: false })
], ForceReply.prototype, "isSelective", void 0);
__decorate([
    (0, inspectable_1.Inspect)({ as: 'input_field_placeholder', nullable: false })
], ForceReply.prototype, "placeholder", void 0);
ForceReply = __decorate([
    (0, inspectable_1.Inspectable)()
], ForceReply);
exports.ForceReply = ForceReply;

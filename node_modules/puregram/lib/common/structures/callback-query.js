"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackQuery = void 0;
const inspectable_1 = require("inspectable");
const message_1 = require("./message");
const user_1 = require("./user");
/**
 * This object represents an incoming callback query from a callback button in
 * an inline keyboard. If the button that originated the query was attached to
 * a message sent by the bot, the field message will be present.
 * If the button was attached to a message sent via the bot (in inline mode),
 * the field inline_message_id will be present.
 * Exactly one of the fields `data` or `game_short_name` will be present.
 */
let CallbackQuery = class CallbackQuery {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique identifier for this query */
    get id() {
        return this.payload.id;
    }
    /** Sender */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender ID */
    get senderId() {
        return this.from.id;
    }
    /**
     * Message with the callback button that originated the query.
     * Note that message content and message date will not be available
     * if the message is too old
     */
    get message() {
        const { message } = this.payload;
        if (!message) {
            return;
        }
        return new message_1.Message(message);
    }
    /**
     * Identifier of the message sent via the bot in inline mode,
     * that originated the query.
     */
    get inlineMessageId() {
        return this.payload.inline_message_id;
    }
    /**
     * Global identifier, uniquely corresponding to the chat to which the message
     * with the callback button was sent. Useful for high scores in games.
     */
    get chatInstance() {
        return this.payload.chat_instance;
    }
    /**
     * Data associated with the callback button.
     * Be aware that a bad client can send arbitrary data in this field.
     */
    get data() {
        return this.payload.data;
    }
    /**
     * Short name of a Game to be returned,
     * serves as the unique identifier for the game
     */
    get gameShortName() {
        return this.payload.game_short_name;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], CallbackQuery.prototype, "id", null);
__decorate([
    (0, inspectable_1.Inspect)()
], CallbackQuery.prototype, "from", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], CallbackQuery.prototype, "message", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], CallbackQuery.prototype, "inlineMessageId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], CallbackQuery.prototype, "chatInstance", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], CallbackQuery.prototype, "data", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], CallbackQuery.prototype, "gameShortName", null);
CallbackQuery = __decorate([
    (0, inspectable_1.Inspectable)()
], CallbackQuery);
exports.CallbackQuery = CallbackQuery;

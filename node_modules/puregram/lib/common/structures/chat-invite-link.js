"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatInviteLink = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
/** Represents an invite link for a chat. */
let ChatInviteLink = class ChatInviteLink {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * The invite link. If the link was created by another chat administrator,
     * then the second part of the link will be replaced with `â€¦`.
     */
    get link() {
        return this.payload.invite_link;
    }
    /** Creator of the link */
    get creator() {
        return new user_1.User(this.payload.creator);
    }
    /** Invite link name */
    get name() {
        return this.payload.name;
    }
    /** `true`, if the link is primary */
    isPrimary() {
        return this.payload.is_primary;
    }
    /** `true`, if the link is revoked */
    isRevoked() {
        return this.payload.is_revoked;
    }
    /** Point in time (Unix timestamp) when the link will expire or has been expired */
    get expireDate() {
        return this.payload.expire_date;
    }
    /**
     * Maximum number of users that can be members of the chat simultaneously
     * after joining the chat via this invite link;
     * `1-99999`
     */
    get memberLimit() {
        return this.payload.member_limit;
    }
    /** `true`, if users joining the chat via the link need to be approved by chat administrators */
    get createsJoinRequest() {
        return this.payload.creates_join_request;
    }
    /** Number of pending join requests created using this link */
    get pendingJoinRequestCount() {
        return this.payload.pending_join_request_count;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], ChatInviteLink.prototype, "link", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatInviteLink.prototype, "creator", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ChatInviteLink.prototype, "name", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatInviteLink.prototype, "isPrimary", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatInviteLink.prototype, "isRevoked", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ChatInviteLink.prototype, "expireDate", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ChatInviteLink.prototype, "memberLimit", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatInviteLink.prototype, "createsJoinRequest", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ChatInviteLink.prototype, "pendingJoinRequestCount", null);
ChatInviteLink = __decorate([
    (0, inspectable_1.Inspectable)()
], ChatInviteLink);
exports.ChatInviteLink = ChatInviteLink;

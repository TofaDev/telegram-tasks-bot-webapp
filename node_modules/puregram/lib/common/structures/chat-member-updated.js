"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatMemberUpdated = void 0;
const inspectable_1 = require("inspectable");
const chat_1 = require("./chat");
const chat_invite_link_1 = require("./chat-invite-link");
const chat_member_1 = require("./chat-member");
const user_1 = require("./user");
/** This object represents changes in the status of a chat member. */
let ChatMemberUpdated = class ChatMemberUpdated {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Chat the user belongs to */
    get chat() {
        return new chat_1.Chat(this.payload.chat);
    }
    /** Performer of the action, which resulted in the change */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Date the change was done in Unix time */
    get date() {
        return this.payload.date;
    }
    /** Previous information about the chat member */
    get oldChatMember() {
        return new chat_member_1.ChatMember(this.payload.old_chat_member);
    }
    /** New information about the chat member */
    get newChatMember() {
        return new chat_member_1.ChatMember(this.payload.new_chat_member);
    }
    /**
     * Chat invite link, which was used by the user to join the chat;
     * for joining by invite link events only.
     */
    get inviteLink() {
        const { invite_link } = this.payload;
        if (!invite_link) {
            return;
        }
        return new chat_invite_link_1.ChatInviteLink(invite_link);
    }
    /** `true`, if the user joined the chat via a chat folder invite link */
    get viaChatFolderInviteLink() {
        return this.payload.via_chat_folder_invite_link;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], ChatMemberUpdated.prototype, "chat", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatMemberUpdated.prototype, "from", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatMemberUpdated.prototype, "date", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatMemberUpdated.prototype, "oldChatMember", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatMemberUpdated.prototype, "newChatMember", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ChatMemberUpdated.prototype, "inviteLink", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ChatMemberUpdated.prototype, "viaChatFolderInviteLink", null);
ChatMemberUpdated = __decorate([
    (0, inspectable_1.Inspectable)()
], ChatMemberUpdated);
exports.ChatMemberUpdated = ChatMemberUpdated;

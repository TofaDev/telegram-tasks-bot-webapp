"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatPermissions = void 0;
const inspectable_1 = require("inspectable");
/**
 * Describes actions that a non-administrator user is allowed to take in a
 * chat.
 */
let ChatPermissions = class ChatPermissions {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * `true`, if the user is allowed to send text messages, contacts, locations
     * and venues
     */
    canSendMessages() {
        return this.payload.can_send_messages;
    }
    /**
     * `true`, if the user is allowed to send audios, documents, photos, videos,
     * video notes and voice notes, implies `can_send_messages`
     */
    canSendMediaMessages() {
        return this.payload.can_send_media_messages;
    }
    /**
     * `true`, if the user is allowed to send polls, implies `can_send_messages`
     */
    canSendPolls() {
        return this.payload.can_send_polls;
    }
    /**
     * `true`, if the user is allowed to send animations, games, stickers and use
     * inline bots, implies `can_send_media_messages`
     */
    canSendOtherMessages() {
        return this.payload.can_send_other_messages;
    }
    /**
     * `true`, if the user is allowed to add web page previews to their messages,
     * implies `can_send_media_messages`
     */
    canAddWebPagePreviews() {
        return this.payload.can_add_web_page_previews;
    }
    /**
     * `true`, if the user is allowed to change the chat title, photo and other
     * settings. Ignored in public supergroups
     */
    canChangeInfo() {
        return this.payload.can_change_info;
    }
    /** `true`, if the user is allowed to invite new users to the chat */
    canInviteUsers() {
        return this.payload.can_invite_users;
    }
    /**
     * `true`, if the user is allowed to pin messages. Ignored in public
     * supergroups
     */
    canPinMessages() {
        return this.payload.can_pin_messages;
    }
    /** `true`, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages */
    canManageTopics() {
        return this.payload.can_manage_topics;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canSendMessages", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canSendMediaMessages", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canSendPolls", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canSendOtherMessages", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canAddWebPagePreviews", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canChangeInfo", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canInviteUsers", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canPinMessages", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ChatPermissions.prototype, "canManageTopics", null);
ChatPermissions = __decorate([
    (0, inspectable_1.Inspectable)()
], ChatPermissions);
exports.ChatPermissions = ChatPermissions;

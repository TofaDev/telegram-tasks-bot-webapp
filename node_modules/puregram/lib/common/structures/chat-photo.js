"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatPhoto = void 0;
const inspectable_1 = require("inspectable");
/** This object represents a chat photo. */
let ChatPhoto = class ChatPhoto {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * File identifier of small (`160x160`) chat photo.
     * This `file_id` can be used only for photo download and only for as long
     * as the photo is not changed.
     */
    get smallFileId() {
        return this.payload.small_file_id;
    }
    /**
     * Unique file identifier of small (`160x160`) chat photo, which is supposed
     * to be the same over time and for different bots. Can't be used to download
     * or reuse the file.
     */
    get smallFileUniqueId() {
        return this.payload.small_file_unique_id;
    }
    /**
     * File identifier of big (`640x640`) chat photo. This `file_id` can be used
     * only for photo download and only for as long as the photo is not changed.
     */
    get bigFileId() {
        return this.payload.big_file_id;
    }
    /**
     * Unique file identifier of big (`640x640`) chat photo, which is supposed
     * to be the same over time and for different bots. Can't be used to
     * download or reuse the file.
     */
    get bigFileUniqueId() {
        return this.payload.big_file_unique_id;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], ChatPhoto.prototype, "smallFileId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatPhoto.prototype, "smallFileUniqueId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatPhoto.prototype, "bigFileId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ChatPhoto.prototype, "bigFileUniqueId", null);
ChatPhoto = __decorate([
    (0, inspectable_1.Inspectable)()
], ChatPhoto);
exports.ChatPhoto = ChatPhoto;

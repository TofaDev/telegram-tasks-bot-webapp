"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptedCredentials = void 0;
const inspectable_1 = require("inspectable");
/**
 * Contains data required for decrypting and authenticatin
 * `EncryptedPassportElement`. See the Telegram Passport Documentation for a
 * complete description of the data decryption and authentication processes.
 */
let EncryptedCredentials = class EncryptedCredentials {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * Base64-encoded encrypted JSON-serialized data with unique user's payload,
     * data hashes and secrets required for `EncryptedPassportElement` decryption
     * and authentication
     */
    get data() {
        return this.payload.data;
    }
    /** Base64-encoded data hash for data authentication */
    get hash() {
        return this.payload.hash;
    }
    /**
     * Base64-encoded secret, encrypted with the bot's public RSA key, required
     * for data decryption
     */
    get secret() {
        return this.payload.secret;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], EncryptedCredentials.prototype, "data", null);
__decorate([
    (0, inspectable_1.Inspect)()
], EncryptedCredentials.prototype, "hash", null);
__decorate([
    (0, inspectable_1.Inspect)()
], EncryptedCredentials.prototype, "secret", null);
EncryptedCredentials = __decorate([
    (0, inspectable_1.Inspectable)()
], EncryptedCredentials);
exports.EncryptedCredentials = EncryptedCredentials;

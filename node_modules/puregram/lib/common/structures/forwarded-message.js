"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardedMessage = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
const chat_1 = require("./chat");
/** This object represents a forwarded message. */
let ForwardedMessage = class ForwardedMessage {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * For messages forwarded from channels, identifier of the original message
     * in the channel
     */
    get id() {
        return this.payload.forward_from_message_id;
    }
    /** For forwarded messages, sender of the original message */
    get from() {
        const { forward_from } = this.payload;
        if (!forward_from) {
            return;
        }
        return new user_1.User(forward_from);
    }
    /**
     * For messages forwarded from channels, information about the original
     * channel
     */
    get chat() {
        const { forward_from_chat } = this.payload;
        if (!forward_from_chat) {
            return;
        }
        return new chat_1.Chat(forward_from_chat);
    }
    /**
     * For messages forwarded from channels, signature of the post author
     * if present
     */
    get signature() {
        return this.payload.forward_signature;
    }
    /**
     * Sender's name for messages forwarded from users who disallow adding a link
     * to their account in forwarded messages
     */
    get senderName() {
        return this.payload.forward_sender_name;
    }
    /**
     * For forwarded messages, date the original message was sent in Unix time
     */
    get createdAt() {
        return this.payload.forward_date;
    }
    /** `true`, if the message is a channel post that was automatically forwarded to the connected discussion group */
    isAutomatic() {
        return this.payload.is_automatic_forward;
    }
};
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ForwardedMessage.prototype, "id", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ForwardedMessage.prototype, "from", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ForwardedMessage.prototype, "chat", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ForwardedMessage.prototype, "signature", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], ForwardedMessage.prototype, "senderName", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ForwardedMessage.prototype, "createdAt", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], ForwardedMessage.prototype, "isAutomatic", null);
ForwardedMessage = __decorate([
    (0, inspectable_1.Inspectable)()
], ForwardedMessage);
exports.ForwardedMessage = ForwardedMessage;

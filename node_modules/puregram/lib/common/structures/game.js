"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
const inspectable_1 = require("inspectable");
const attachments_1 = require("../attachments");
const photo_size_1 = require("./photo-size");
const message_entity_1 = require("./message-entity");
/** This object represents a game. */
let Game = class Game {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Title of the game */
    get title() {
        return this.payload.title;
    }
    /** Description of the game */
    get description() {
        return this.payload.description;
    }
    /** Photo that will be displayed in the game message in chats. */
    get photo() {
        const { photo } = this.payload;
        if (!photo) {
            return;
        }
        return photo.map(element => new photo_size_1.PhotoSize(element));
    }
    /**
     * Brief description of the game or high scores included in the game message
     * Can be automatically edited to include current high scores for the game
     * when the bot calls `setGameScore`, or manually edited using
     * `editMessageText`. 0-4096 characters.
     */
    get text() {
        return this.payload.text;
    }
    /**
     * Special entities that appear in text, such as usernames, URLs, bot
     * commands, etc.
     */
    get textEntities() {
        const { text_entities } = this.payload;
        if (!text_entities) {
            return;
        }
        return text_entities.map(entity => new message_entity_1.MessageEntity(entity));
    }
    /**
     * Animation that will be displayed in the game message in chats.
     * Upload via BotFather
     */
    get animation() {
        const { animation } = this.payload;
        if (!animation) {
            return;
        }
        return new attachments_1.AnimationAttachment(animation);
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], Game.prototype, "title", null);
__decorate([
    (0, inspectable_1.Inspect)()
], Game.prototype, "description", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], Game.prototype, "photo", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], Game.prototype, "text", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], Game.prototype, "textEntities", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], Game.prototype, "animation", null);
Game = __decorate([
    (0, inspectable_1.Inspectable)()
], Game);
exports.Game = Game;

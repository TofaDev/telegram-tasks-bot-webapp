"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQuery = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
const location_1 = require("./location");
/**
 * This object represents an incoming inline query.
 * When the user sends an empty query, your bot could return some default or
 * trending results.
 */
let InlineQuery = class InlineQuery {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique identifier for this query */
    get id() {
        return this.payload.id;
    }
    /** Sender */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender location, only for bots that request user location */
    get location() {
        const { location } = this.payload;
        if (!location) {
            return;
        }
        return new location_1.Location(location);
    }
    /** Text of the query (up to 256 characters) */
    get query() {
        return this.payload.query;
    }
    /** Offset of the results to be returned, can be controlled by the bot */
    get offset() {
        return this.payload.offset;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], InlineQuery.prototype, "id", null);
__decorate([
    (0, inspectable_1.Inspect)()
], InlineQuery.prototype, "from", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], InlineQuery.prototype, "location", null);
__decorate([
    (0, inspectable_1.Inspect)()
], InlineQuery.prototype, "query", null);
__decorate([
    (0, inspectable_1.Inspect)()
], InlineQuery.prototype, "offset", null);
InlineQuery = __decorate([
    (0, inspectable_1.Inspectable)()
], InlineQuery);
exports.InlineQuery = InlineQuery;

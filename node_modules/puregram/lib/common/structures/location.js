"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Location = void 0;
const inspectable_1 = require("inspectable");
/** This object represents a point on the map. */
let Location = class Location {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Longitude as defined by sender */
    get longitude() {
        return this.payload.longitude;
    }
    /** Latitude as defined by sender */
    get latitude() {
        return this.payload.latitude;
    }
    /** The radius of uncertainty for the location, measured in meters; `0-1500` */
    get horizontalAccuracy() {
        return this.payload.horizontal_accuracy;
    }
    /**
     * Time relative to the message sending date,
     * during which the location can be updated, in seconds.
     * For active live locations only.
     */
    get livePeriod() {
        return this.payload.live_period;
    }
    /**
     * The direction in which user is moving, in degrees; `1-360`.
     * For active live locations only.
     */
    get heading() {
        return this.payload.heading;
    }
    /**
     * Maximum distance for proximity alerts about approaching another chat member, in meters.
     * For sent live locations only.
     */
    get proximityAlertRadius() {
        return this.payload.proximity_alert_radius;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], Location.prototype, "longitude", null);
__decorate([
    (0, inspectable_1.Inspect)()
], Location.prototype, "latitude", null);
__decorate([
    (0, inspectable_1.Inspect)()
], Location.prototype, "horizontalAccuracy", null);
__decorate([
    (0, inspectable_1.Inspect)()
], Location.prototype, "livePeriod", null);
__decorate([
    (0, inspectable_1.Inspect)()
], Location.prototype, "heading", null);
__decorate([
    (0, inspectable_1.Inspect)()
], Location.prototype, "proximityAlertRadius", null);
Location = __decorate([
    (0, inspectable_1.Inspectable)()
], Location);
exports.Location = Location;

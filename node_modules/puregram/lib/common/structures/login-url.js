"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginUrl = void 0;
const inspectable_1 = require("inspectable");
/**
 * This object represents a parameter of the inline keyboard button used to
 * automatically authorize a user.
 */
let LoginUrl = class LoginUrl {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * An HTTP URL to be opened with user authorization data added to the query
     * string when the button is pressed. If the user refuses to provid
     * authorization data, the original URL without information about the user
     * will be opened. The data added is the same as described in Receiving
     * authorization data.
     *
     * **NOTE**: You **must** always check the hash of the received data to
     * verify the authentication and the integrity of the data as described in
     * Checking authorization.
     */
    get url() {
        return this.payload.url;
    }
    /** New text of the button in forwarded messages. */
    get forwardText() {
        return this.payload.forward_text;
    }
    /**
     * Username of a bot, which will be used for user authorization.
     * See Setting up a bot for more details. If not specified, the current
     * bot's username will be assumed. The url's domain must be the same as the
     * domain linked with the bot. See Linking your domain to the bot for more
     * details.
     */
    get botUsername() {
        return this.payload.bot_username;
    }
    /**
     * Pass `true` to request the permission for your bot to send messages to the
     * user.
     */
    get requestWriteAccess() {
        return this.payload.request_write_access;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], LoginUrl.prototype, "url", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], LoginUrl.prototype, "forwardText", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], LoginUrl.prototype, "botUsername", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], LoginUrl.prototype, "requestWriteAccess", null);
LoginUrl = __decorate([
    (0, inspectable_1.Inspectable)()
], LoginUrl);
exports.LoginUrl = LoginUrl;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaskPosition = void 0;
const inspectable_1 = require("inspectable");
/**
 * This object describes the position on faces where a mask should be placed
 * by default.
 */
let MaskPosition = class MaskPosition {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * The part of the face relative to which the mask should be placed.
     * One of `forehead`, `eyes`, `mouth`, or `chin`.
     */
    get point() {
        return this.payload.point;
    }
    /**
     * Shift by X-axis measured in widths of the mask scaled to the face size,
     * from left to right. For example, choosing `-1.0` will place mask just to
     * the left of the default mask position.
     */
    get xShift() {
        return this.payload.x_shift;
    }
    /**
     * Shift by Y-axis measured in heights of the mask scaled to the face size,
     * from top to bottom. For example, `1.0` will place the mask just below the
     * default mask position.
     */
    get yShift() {
        return this.payload.y_shift;
    }
    /** Mask scaling coefficient. For example, `2.0` means double size. */
    get scale() {
        return this.payload.scale;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], MaskPosition.prototype, "point", null);
__decorate([
    (0, inspectable_1.Inspect)()
], MaskPosition.prototype, "xShift", null);
__decorate([
    (0, inspectable_1.Inspect)()
], MaskPosition.prototype, "yShift", null);
__decorate([
    (0, inspectable_1.Inspect)()
], MaskPosition.prototype, "scale", null);
MaskPosition = __decorate([
    (0, inspectable_1.Inspectable)()
], MaskPosition);
exports.MaskPosition = MaskPosition;

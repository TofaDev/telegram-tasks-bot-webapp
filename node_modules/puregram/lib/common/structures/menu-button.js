"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuButton = void 0;
const inspectable_1 = require("inspectable");
const web_app_info_1 = require("./web-app-info");
/** This object describes the bot's menu button in a private chat. */
let MenuButton = class MenuButton {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Type of the button */
    get type() {
        return this.payload.type;
    }
    /** Text on the button */
    get text() {
        return this.payload.text;
    }
    /**
     * Description of the Web App that will be launched when the user presses the button.
     * The Web App will be able to send an arbitrary message on behalf of the user
     * using the method `answerWebAppQuery`.
     */
    get webApp() {
        const { web_app } = this.payload;
        if (!web_app) {
            return;
        }
        return new web_app_info_1.WebAppInfo(web_app);
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], MenuButton.prototype, "type", null);
__decorate([
    (0, inspectable_1.Inspect)()
], MenuButton.prototype, "text", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], MenuButton.prototype, "webApp", null);
MenuButton = __decorate([
    (0, inspectable_1.Inspectable)()
], MenuButton);
exports.MenuButton = MenuButton;

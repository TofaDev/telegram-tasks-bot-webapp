"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEntity = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
/**
 * This object represents one special entity in a text message.
 * For example, hashtags, usernames, URLs, etc.
 */
let MessageEntity = class MessageEntity {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * Type of the entity.
     *
     * Can be `mention` (`@username`), `hashtag` (`#hashtag`), `cashtag`
     * (`$USD`), `bot_command` (`/start@jobs_bot`), `url`
     * (`https://telegram.org`), `email` (`do-not-reply@telegram.org`),
     * `phone_number` (`+1-212-555-0123`), `bold` (**bold text**), `italic`
     * (_italic text_), `underline` (underlined text), `strikethrough`
     * (~~strikethrough text~~), “spoiler” (spoiler message), `code` (`monowidth string`),
     * `pre` (`monowidth block`), `text_link` (for clickable text URLs), `text_mention`
     * (for users without usernames)
     */
    get type() {
        return this.payload.type;
    }
    /** Offset in UTF-16 code units to the start of the entity */
    get offset() {
        return this.payload.offset;
    }
    /** Length of the entity in UTF-16 code units */
    get length() {
        return this.payload.length;
    }
    /**
     * For `text_link` only, url that will be opened after user taps on the text
     */
    get url() {
        return this.payload.url;
    }
    /** For `text_mention` only, the mentioned user */
    get user() {
        const { user } = this.payload;
        if (!user) {
            return;
        }
        return new user_1.User(user);
    }
    /** For `pre` only, the programming language of the entity text */
    get language() {
        return this.payload.language;
    }
    /**
     * For `custom_emoji` only, unique identifier of the custom emoji.
     *
     * Use `getCustomEmojiStickers` to get full information about the sticker
     */
    get customEmojiId() {
        return this.payload.custom_emoji_id;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], MessageEntity.prototype, "type", null);
__decorate([
    (0, inspectable_1.Inspect)()
], MessageEntity.prototype, "offset", null);
__decorate([
    (0, inspectable_1.Inspect)()
], MessageEntity.prototype, "length", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], MessageEntity.prototype, "url", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], MessageEntity.prototype, "user", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], MessageEntity.prototype, "language", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], MessageEntity.prototype, "customEmojiId", null);
MessageEntity = __decorate([
    (0, inspectable_1.Inspectable)()
], MessageEntity);
exports.MessageEntity = MessageEntity;

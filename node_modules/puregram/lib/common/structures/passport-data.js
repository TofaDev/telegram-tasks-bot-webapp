"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportData = void 0;
const inspectable_1 = require("inspectable");
const encrypted_passport_element_1 = require("./encrypted-passport-element");
const encrypted_credentials_1 = require("./encrypted-credentials");
/**
 * Contains information about Telegram Passport data shared with the bot by the
 * user.
 */
let PassportData = class PassportData {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * Array with information about documents and other Telegram Passport
     * elements that was shared with the bot
     */
    get data() {
        const { data } = this.payload;
        if (!data) {
            return;
        }
        return data.map(element => new encrypted_passport_element_1.EncryptedPassportElement(element));
    }
    /** Encrypted credentials required to decrypt the data */
    get credentials() {
        return new encrypted_credentials_1.EncryptedCredentials(this.payload.credentials);
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], PassportData.prototype, "data", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PassportData.prototype, "credentials", null);
PassportData = __decorate([
    (0, inspectable_1.Inspectable)()
], PassportData);
exports.PassportData = PassportData;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportFile = void 0;
const inspectable_1 = require("inspectable");
/**
 * This object represents a file uploaded to Telegram Passport.
 * Currently all Telegram Passport files are in JPEG format when decrypted and
 * don't exceed 10MB.
 */
let PassportFile = class PassportFile {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    get fileId() {
        return this.payload.file_id;
    }
    /**
     * Unique identifier for this file, which is supposed to be the same over
     * time and for different bots. Can't be used to download or reuse the file.
     */
    get fileUniqueId() {
        return this.payload.file_unique_id;
    }
    /** File size */
    get fileSize() {
        return this.payload.file_size;
    }
    /** Unix time when the file was uploaded */
    get fileDate() {
        return this.payload.file_date;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], PassportFile.prototype, "fileId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PassportFile.prototype, "fileUniqueId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PassportFile.prototype, "fileSize", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PassportFile.prototype, "fileDate", null);
PassportFile = __decorate([
    (0, inspectable_1.Inspectable)()
], PassportFile);
exports.PassportFile = PassportFile;

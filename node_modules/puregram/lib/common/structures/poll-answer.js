"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollAnswer = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
const chat_1 = require("./chat");
/** This object represents an answer of a user in a non-anonymous poll. */
let PollAnswer = class PollAnswer {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique poll identifier */
    get pollId() {
        return this.payload.poll_id;
    }
    /** The chat that changed the answer to the poll, if the voter is anonymous */
    get voterChat() {
        const { voter_chat } = this.payload;
        if (!voter_chat) {
            return;
        }
        return new chat_1.Chat(voter_chat);
    }
    /** The user, who changed the answer to the poll */
    get user() {
        const { user } = this.payload;
        if (!user) {
            return;
        }
        return new user_1.User(user);
    }
    /** Sender ID. Since `user` and `voterChat` are mutually exclusive, this field will either contain `user.id` or `voterChat.id` as a shortcut =) */
    get senderId() {
        var _a, _b, _c;
        return (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = this.voterChat) === null || _c === void 0 ? void 0 : _c.id;
    }
    /**
     * 0-based identifiers of answer options, chosen by the user.
     * May be empty if the user retracted their vote.
     */
    get optionIds() {
        return this.payload.option_ids;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], PollAnswer.prototype, "pollId", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], PollAnswer.prototype, "voterChat", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], PollAnswer.prototype, "user", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PollAnswer.prototype, "senderId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PollAnswer.prototype, "optionIds", null);
PollAnswer = __decorate([
    (0, inspectable_1.Inspectable)()
], PollAnswer);
exports.PollAnswer = PollAnswer;

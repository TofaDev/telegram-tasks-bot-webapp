"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreCheckoutQuery = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
const order_info_1 = require("./order-info");
/** This object contains information about an incoming pre-checkout query. */
let PreCheckoutQuery = class PreCheckoutQuery {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique query identifier */
    get id() {
        return this.payload.id;
    }
    /** User who sent the query */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender ID */
    get senderId() {
        return this.from.id;
    }
    /** Three-letter ISO 4217 currency code */
    get currency() {
        return this.payload.currency;
    }
    /**
     * Total price in the smallest units of the currency
     * (integer, not float/double). For example, for a price of
     * `US$ 1.45` pass `amount = 145`. See the `exp` parameter in
     * [currencies.json](https://core.telegram.org/bots/payments/currencies.json),
     * it shows the number of digits past the decimal point for each currency
     * (2 for the majority of currencies).
     */
    get totalAmount() {
        return this.payload.total_amount;
    }
    /** Bot specified invoice payload */
    get invoicePayload() {
        return this.payload.invoice_payload;
    }
    /** Identifier of the shipping option chosen by the user */
    get shippingOptionId() {
        return this.payload.shipping_option_id;
    }
    /** Order info provided by the user */
    get orderInfo() {
        const { order_info } = this.payload;
        if (!order_info) {
            return;
        }
        return new order_info_1.OrderInfo(order_info);
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], PreCheckoutQuery.prototype, "id", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PreCheckoutQuery.prototype, "from", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PreCheckoutQuery.prototype, "senderId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PreCheckoutQuery.prototype, "currency", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PreCheckoutQuery.prototype, "totalAmount", null);
__decorate([
    (0, inspectable_1.Inspect)()
], PreCheckoutQuery.prototype, "invoicePayload", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], PreCheckoutQuery.prototype, "shippingOptionId", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], PreCheckoutQuery.prototype, "orderInfo", null);
PreCheckoutQuery = __decorate([
    (0, inspectable_1.Inspectable)()
], PreCheckoutQuery);
exports.PreCheckoutQuery = PreCheckoutQuery;

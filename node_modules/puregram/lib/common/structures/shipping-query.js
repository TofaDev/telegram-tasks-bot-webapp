"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShippingQuery = void 0;
const inspectable_1 = require("inspectable");
const user_1 = require("./user");
const shipping_address_1 = require("./shipping-address");
/** This object contains information about an incoming shipping query. */
let ShippingQuery = class ShippingQuery {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique query identifier */
    get id() {
        return this.payload.id;
    }
    /** User who sent the query */
    get from() {
        return new user_1.User(this.payload.from);
    }
    /** Sender ID */
    get senderId() {
        return this.from.id;
    }
    /** Bot specified invoice payload */
    get invoicePayload() {
        return this.payload.invoice_payload;
    }
    /** User specified shipping address */
    get shippingAddress() {
        return new shipping_address_1.ShippingAddress(this.payload.shipping_address);
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], ShippingQuery.prototype, "id", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ShippingQuery.prototype, "from", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ShippingQuery.prototype, "senderId", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ShippingQuery.prototype, "invoicePayload", null);
__decorate([
    (0, inspectable_1.Inspect)()
], ShippingQuery.prototype, "shippingAddress", null);
ShippingQuery = __decorate([
    (0, inspectable_1.Inspectable)()
], ShippingQuery);
exports.ShippingQuery = ShippingQuery;

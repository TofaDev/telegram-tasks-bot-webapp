"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const inspectable_1 = require("inspectable");
/** This object represents a Telegram user or bot. */
let User = class User {
    constructor(payload) {
        this.payload = payload;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    /** Unique identifier for this user or bot */
    get id() {
        return Number(this.payload.id);
    }
    /** `true`, if this user is a bot */
    isBot() {
        return this.payload.is_bot;
    }
    /** User's or bot's first name */
    get firstName() {
        return this.payload.first_name;
    }
    /** User's or bot's last name */
    get lastName() {
        return this.payload.last_name;
    }
    /** User's or bot's username */
    get username() {
        return this.payload.username;
    }
    /**
     * [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag)
     * of the user's language
     */
    get languageCode() {
        return this.payload.language_code;
    }
    /** `true`, if this user is a Telegram Premium user */
    isPremium() {
        return this.payload.is_premium;
    }
    /** `true`, if this user added the bot to the attachment menu */
    get addedToAttachmentMenu() {
        return this.payload.added_to_attachment_menu;
    }
    /**
     * `true`, if the bot can be invited to groups.
     *
     * Returned only in `getMe`.
     */
    canJoinGroups() {
        return this.payload.can_join_groups;
    }
    /**
     * `true`, if privacy mode is disabled for the bot.
     *
     * Returned only in `getMe`.
     */
    canReadAllGroupMessages() {
        return this.payload.can_read_all_group_messages;
    }
    /**
     * `true`, if the bot supports inline queries.
     *
     * Returned only in `getMe`.
     */
    get supportsInlineQueries() {
        return this.payload.supports_inline_queries;
    }
    toJSON() {
        return this.payload;
    }
};
__decorate([
    (0, inspectable_1.Inspect)()
], User.prototype, "id", null);
__decorate([
    (0, inspectable_1.Inspect)()
], User.prototype, "firstName", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], User.prototype, "lastName", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], User.prototype, "username", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], User.prototype, "languageCode", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], User.prototype, "isPremium", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], User.prototype, "addedToAttachmentMenu", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], User.prototype, "canJoinGroups", null);
__decorate([
    (0, inspectable_1.Inspect)({ compute: true, nullable: false })
], User.prototype, "canReadAllGroupMessages", null);
__decorate([
    (0, inspectable_1.Inspect)({ nullable: false })
], User.prototype, "supportsInlineQueries", null);
User = __decorate([
    (0, inspectable_1.Inspectable)()
], User);
exports.User = User;
